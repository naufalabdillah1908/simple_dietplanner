# -*- coding: utf-8 -*-
"""Diet Planner.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1066d8mv_CkJ04cI1dWOb1gouMqeptNFH
"""

import pandas as pd
import re
import time

import warnings
warnings.filterwarnings('ignore')

# Commented out IPython magic to ensure Python compatibility.

#read csv
test = pd.read_csv('nutrition.csv')

def process_data(test):
  print("Processing data... Please wait")
  #Filter raw and other food
  print("Filtering data...")
  for i in test.index:
    name = test.name[i].lower()
    if test.calories[i] <= 100:
      test.drop([i], axis=0, inplace = True)

    elif 'raw' in name or 'syrup' in name or 'extract' in name or 'catsup' in name or 'frozen' in name or 'tapioca' in name or 'sauce' in name or 'juice' in name or 'beverages' in name or 'beverage' in name or 'carbonated' in name or 'pepper' in name or 'water' in name or 'salt' in name or 'lard' in name or 'dried' in name or 'spices' in name or 'oil' in name or 'starch' in name or 'flour' in name or 'uncooked' in name or 'powder' in name or 'toppings' in name or 'vinegar' in name or 'babyfood' in name or 'nuts' in name or 'dressing' in name:
      test.drop([i], axis=0, inplace=True)
  print("Filtering done! changing strings to float...")
  #change string to float, for counting density
  for i in test.index:
    if isinstance(test.total_fat[i], str):
      test.total_fat[i] = test.total_fat[i].replace("g","")
    test.total_fat[i] = float(test.total_fat[i])

    if isinstance(test.protein[i], str):
      test.protein[i] = test.protein[i].replace("g","")
    test.protein[i] = float(test.protein[i])

    if isinstance(test.carbohydrate[i], str):
      test.carbohydrate[i] = test.carbohydrate[i].replace("g","")
    test.carbohydrate[i] = float(test.carbohydrate[i])

    if isinstance(test.fiber[i], str):
      test.fiber[i] = test.fiber[i].replace("g","")
    test.fiber[i] = float(test.fiber[i])
  print("Processing done!")


    
process_data(test)
# input calorie limit
berat_badan = int(input("Input Berat Badan: "))
cal_limit = int(input("Input Limit calorie limit: "))
fibre_limit = 25
carb_limit = cal_limit*0.15
fat_limit = cal_limit*0.03
protein_limit = berat_badan*2


#itung nutritional density

density = []
for i in test.index:
  dense = (test.total_fat[i] + test.carbohydrate[i] + test.protein[i] + test.fiber[i]) / (fibre_limit + carb_limit + fat_limit + protein_limit)
  dense2 = (test.calories[i]) / cal_limit
  denseness = dense/dense2
  density.insert(i, denseness)

#insert density ke dataframe
test.insert(0, "density", density)

#choose random 100 meals, biar bervariasi tiap run
random_meal = pd.DataFrame()
random_meal = test.sample(n = 100)

#sort randomnya by density
random_meal = random_meal.sort_values(by="density", ascending = False)

idx = []

for i in range(len(random_meal)):
  idx.insert(i, i)


random_meal.insert(0, 'idx', idx)
random_meal = random_meal.set_index('idx')

random_meal

#Greedy?

def greedy(random_meal, cal_limit):
 
  result = [] 
  totweight = 0
  profit = 0
  carb = 0
  fat = 0
  fiber = 0
  protein = 0
  count = 0
  density = 0
  length = len(random_meal.density)

  print("Makanan yang anda bisa konsumsi hari ini: ")
  start = time.time()

  for i in random_meal.index:
    if (totweight <= cal_limit):
      if (totweight + random_meal.calories[i] <= cal_limit):
        totweight = totweight + random_meal.calories[i]
        profit = profit + random_meal.total_fat[i]
        carb = carb + random_meal.carbohydrate[i]
        fat = fat + random_meal.total_fat[i]
        fiber = fiber + random_meal.fiber[i]
        protein = protein + random_meal.protein[i]
        density = density +random_meal.density[i] 
        count = count+1
        print("-", random_meal.name[i], " - ", random_meal.calories[i], "kcal")

  end = time.time()

  print("Note: all food has a weight of 100 g")
  if totweight <= cal_limit:
    print("\ntotal calorie: ", totweight, " kcal")
    print("total fat: ", profit, " g")
    print("total carb: ", carb, " g")
    print("total fiber: ", fiber, " g")
    print("total protein: ", protein, " g")

    print("Nutritional Density Value: ", density/count)
  
  else:
    print("tidak ada solusi")

  print("Total time taken: ", end-start)

print("\n\nresult by Greedy: ")
greedy(random_meal, cal_limit)




#DP
length = len(random_meal.index)
table = [[-1 for i in range(cal_limit + 1)] for j in range(length+1)]
weight = cal_limit
#build table
def dynamic(random_meal, weight, length):
  for i in range(length+1):
    for w in range(weight+1):
      if i == 0 or w == 0:
        table[i][w] = 0
      elif random_meal.calories[i-1] <= w:
        table[i][w] = max(random_meal.density[i-1] + table[i-1][w - random_meal.calories[i-1]], table[i-1][w])
      else:
        table[i][w] = table[i-1][w]
      
  return table[length][weight]

totweight = 0
profit = 0
carb = 0
fat = 0
fiber = 0
protein = 0
count = 0
density = 0

def reconstruct(length, table, weight, random_meal):
  recon = set()

  for j in range(0, length+1)[::1]:
    cur_val = table[j][weight]
    prev_val = table[j-1][weight]
    if cur_val > prev_val and weight >= 0:
      recon.add(j)
      weight = weight - random_meal.calories[j]
  return recon


print("\n\nresult by DP: ")
start = time.time()
dynamic(random_meal, weight, length)
index = reconstruct(length, table, weight, random_meal)
end = time.time()
print("makanan yang bisa anda makan hari ini: ")
for i in index:
  print("-", random_meal.name[i], " - ", random_meal.calories[i], "kcal")
  totweight = totweight + random_meal.calories[i]
  profit = profit + random_meal.total_fat[i]
  carb = carb + random_meal.carbohydrate[i]
  fat = fat + random_meal.total_fat[i]
  fiber = fiber + random_meal.fiber[i]
  protein = protein + random_meal.protein[i]
  density = density +random_meal.density[i] 
  count = count+1
print("Note: all food has a weight of 100 g")

print("\ntotal calorie: ", totweight, " kcal")
print("total fat: ", profit, " g")
print("total carb: ", carb, " g")
print("total fiber: ", fiber, " g")
print("total protein: ", protein, " g")

print("Nutritional Density Value: ", density/count)

print("total time taken: ", end-start)
